/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.gradlelab

import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.GradleRunner
import org.junit.jupiter.api.io.TempDir
import java.io.File
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue

/**
 * A simple functional test for the 'com.gradlelab.coveragelock' plugin.
 */
class CoveragelockPluginFunctionalTest {

    @field:TempDir
    lateinit var projectDir: File

    @Test fun `no coverage file`() {
        setupTestProject("just_plugin_applied")
        val log : String = runAndGetLogs("jacocoTestReport", false);
        assertTrue(log.contains("but expected minimum is 0.8"))
    }

    @Test fun `with coverage file`() {
        setupTestProject("just_plugin_with_file")
        val log : String = runAndGetLogs("jacocoTestReport", false);
        assertTrue(log.contains("but expected minimum is 0.6"))
    }

    @Test fun `coverage increases`() {
        setupTestProject("coverage_increases")
        val log : String = runAndGetLogs("lockInCoverageGains", true);
        assertTrue(log.contains("Coverage has increased from"))
        assertTrue(log.contains("Locking in coverage of"))
        // Verify file has been modified.
        assertEquals(0.5f, File(projectDir, "app/coverage.txt").readText().toFloat())
    }

    private fun runAndGetLogs(taskToRun: String, expectSuccess: Boolean): String {
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withProjectDir(projectDir)
        runner.withArguments(taskToRun)
        val result : BuildResult = if (expectSuccess) runner.build() else runner.buildAndFail()

        return result.output
    }

    private fun setupTestProject(dir : String) {
        val srcDir = File("src/functionalTest/resources", dir)
        srcDir.copyRecursively(projectDir)
    }
}
